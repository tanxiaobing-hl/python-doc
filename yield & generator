1. 如何理解yield？
  要理解yield，先要理解generator；要理解generator，先要理解iterables。所以我们的逻辑顺序为： iterables --> generator --> yield.
  
1.1 iterables（迭代性） 
  Python中任何可进行迭代的对象，都具有iterable，都是iterables。换言之，所有能使用 "for ... in ..." 操作的对象都是iterables。比如：
      >>> mylist = [1, 2, 3]
      >>> for i in mylist:
      ...    print(i)
      
      >>>mylist = [x*x for x in range(3)]
      >>> for i in mylist:
      ...    print(i)
  当然iterables还有很多，比如：lists/strings/files等。从OOP的角度来看，iterable就是一个接口，但凡实现这个接口的都是iterables.
  iterables使用方便，只要愿意，我们可以把mylist遍历无数遍。但它也有一个明显的缺点：必须把所有的数据都存储在内存里。当数据量很大时，
  这会消耗大量的内存。

1.2 iterator(迭代器）
  提到iterable，自然会想到iterator（迭代器）。
  从OOP的角度来看，但凡实现了 __next__()和__iter__()接口的对象都是迭代器。它的作用就是遍历一个iterable。
  iterator只能使用——次， 当一轮遍历完成后，它便会抛出 StopIteration 异常。要想再次使用这个迭代器遍历，则必须重新初始化。

1.3 generator(生成器）
  generator是一种iterator。生成器不会把所有值都存储在内存里，它只能遍历一次，并动态地生成值。如：
    >>> mygenerator = (x*x for x in range(3))
    >>> for i in mygenerator:
    ...    print(i)
  这里，mygenerator与list comprehension的差别仅在于把中括号[]改成了小括号（）。mygenerator只能用for..in..遍历一次，后面再次执行for..in..
  则会出错。

1.4 yield
  yield关键字，或者说yield表达式，是用于生成generator的最常用的方式。上文中，我们把list comprehension “改造”成了generator。但最常用最专用的
获得generator的方式就是使用 yield + function 组合。这种函数也称为 “generator function”, yield关键字也是专用于generator fucntion的。
  yield 就像函数中的 return，但它只用于generator function, 会返回一个generator.
     >>> def createGenerator():
     ...    mylist = range(3)
     ...    for i in mylist:
     ...        yield i*i
     >>> mygenerator = createGenerator() # create a generator
     >>> print(mygenerator) # mygenerator is an object!
     <generator object createGenerator at 0xb7555c34>
     >>> for i in mygenerator:
     ...     print(i)
     0
     1
     4
 第一次调用 generator function时，函数体是不会执行的，它仅仅返回生成器。
 第一次调用 next()（或者__next__()时），函数体从头开始执行，直到遇到yield返回；
 后续每次调用 next() 时，恢复从上次的yield处开始执行。当函数体执行完毕，则生成器的迭代也完成，生成器变成空。
 如果生成器为空，再次调用next()里，生成器会抛出 exceptions.StopIteration。
 To master yield, you must understand that when you call the function, the code you have written in the function body does not run. 
 The function only returns the generator object, this is a bit tricky :-)
 Then, your code will be run each time the for uses the generator.
 
 Now the hard part:
 The first time the for calls the generator object created from your function, it will run the code in your function from the 
 beginning until it hits yield, then it'll return the first value of the loop. Then, each other call will run the loop you have 
 written in the function one more time, and return the next value, until there is no value to return.
 The generator is considered empty once the function runs, but does not hit yield anymore. It can be because the loop had come 
 to an end, or because you do not satisfy an "if/else" anymore.
 
 Reference:
  https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do 
  
